(define-macro (spinnaker_comp_chrLit x) (integer->char x))

(define-syntax spinnaker_addInt (syntax-rules () ((_ a b)
    (+ a b))))
(define-syntax spinnaker_subInt (syntax-rules () ((_ a b)
    (- a b))))
(define-syntax spinnaker_mulInt (syntax-rules () ((_ a b)
    (* a b))))
(define-syntax spinnaker_divInt (syntax-rules () ((_ a b)
    (quotient a b))))
(define-syntax spinnaker_remInt (syntax-rules () ((_ a b)
    (remainder a b))))
(define-syntax spinnaker_equInt (syntax-rules () ((_ a b)
    (= a b))))
(define-syntax spinnaker_neqInt (syntax-rules () ((_ a b)
    (not (= a b)))))
(define-syntax spinnaker_leqInt (syntax-rules () ((_ a b)
    (<= a b))))
(define-syntax spinnaker_greInt (syntax-rules () ((_ a b)
    (> a b))))

(define-syntax spinnaker_addFlt (syntax-rules () ((_ a b)
    (+ a b))))
(define-syntax spinnaker_subFlt (syntax-rules () ((_ a b)
    (- a b))))
(define-syntax spinnaker_mulFlt (syntax-rules () ((_ a b)
    (* a b))))
(define-syntax spinnaker_divFlt (syntax-rules () ((_ a b)
    (/ a b))))
(define-syntax spinnaker_equFlt (syntax-rules () ((_ a b)
    (= a b))))
(define-syntax spinnaker_neqFlt (syntax-rules () ((_ a b)
    (not (= a b)))))
(define-syntax spinnaker_leqFlt (syntax-rules () ((_ a b)
    (<= a b))))
(define-syntax spinnaker_greFlt (syntax-rules () ((_ a b)
    (> a b))))

(define-syntax spinnaker_andBool (syntax-rules () ((_ a b)
    (and a b))))
(define-syntax spinnaker_orBool (syntax-rules () ((_ a b)
    (or a b))))
(define-syntax spinnaker_notBool (syntax-rules () ((_ a)
    (not a))))

(define-syntax spinnaker_floorFlt (syntax-rules () ((_ a)
    (inexact->exact (floor a)))))
(define-syntax spinnaker_convItoF (syntax-rules () ((_ a)
    (exact->inexact a))))

(define-syntax spinnaker_convItoC (syntax-rules () ((_ a)
    (integer->char a))))
(define-syntax spinnaker_convCtoI (syntax-rules () ((_ a)
    (char->integer a))))

(define (spinnaker_putChr c rw)
    (write-char c)
    rw)
(define (spinnaker_getChr rw)
    (list "(,)" (read-char) rw))

(define (spinnaker_exit i rw)
    (exit i)
    rw)
