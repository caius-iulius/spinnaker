use Core

def id = \i{i}

def tup = (5, (7.1, id))
def tupiden = put tup
    |(a, (b, c)) -> (a, (b, c))
    |(a, b) -> (a, b)
    |a -> a

def curry = \f,a,b{f(a,b)}
def uncurry = \f,(a,b){f a b}
def curryuncurry = \f {curry(uncurry f)}

def void_fn = \(){10}
def eval_void = void_fn()

def calc_max_tests = \k, n{
    put (k, n)
    | (_, 0) -> 0
    | _ -> -1 + k + n * calc_max_tests k (n - 1)
}

def composed = (\f,g,x {f(g x)}) (\k{k+1}) (\k{2*k})

# def op_and = \a, b {
#     put (a, b)
#     | (true, true) -> true
#     | _ -> false
# }
# def op_or = \a, b {
#     put (a, b)
#     | (false, false) -> false
#     | _ -> true
# }
# def op_not = \a {
#     put a
#     | false -> true
#     | true -> false
# }

# NOTE: Se si rimuovono le parentesi questo codice diventa ambiguo
def ambiguous = \n {
    put n / 2
    | 1 -> (put n
        | 2 -> 0
        | _ -> 1)
    | _ -> 2 
}

def sequential =
    let _ = 10 + 11 ->
    let _ = () ->
    10

def strangesyntax = 6 - let y = 10 -> 10 + 1
