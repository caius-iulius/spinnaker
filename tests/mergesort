# data List a = Nil | Cons a (List a)
use Core

mod pub Sort {
    def (::) = Cons

    def split_internal : forall a . (List a, List a) -> List a -> (List a, List a) 
    = \(curra, currb), lst ->
        put lst
        | [x, xp | xs] -> split_internal (x :: curra, xp :: currb) xs
        | [x] -> (x::curra, currb)
        | [] -> (curra, currb)

    def split : forall a . List a -> (List a, List a)
    = \lst -> split_internal ([], []) (reverse lst)

    def merge = \compare, lists ->
        put lists
        | (l, Nil) -> l
        | (Nil, l) -> l
        | (Cons xa xsa, Cons xb xsb) -> (
            put compare xa xb
            | True -> xa :: merge compare (xsa, (xb::xsb))
            | _ -> xb :: merge compare ((xa::xsa), xsb)
        )

    def mytest = \lists ->
        put lists
        | (Cons xa xsa, Cons xb xsb) -> (xa::xsb, xb::xsa)

    def pub mergesort = \compare, list ->
        put list
        | Nil -> Nil
        | Cons x Nil -> list
        | _ -> let (left, right) = split list ->
            merge compare (mergesort compare left, mergesort compare right)
}

def main = putStrLn $ Utility.showListInt $ Sort.mergesort (<=) (reverse $ -5..10)
