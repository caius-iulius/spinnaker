# TODO:Questo file andrà copiato in una stringa nel compilatore

mod Builtins {
    # Combinatori primitivi

    ext pub _addInt : Int, Int -> Int
    ext pub _subInt : Int, Int -> Int
    ext pub _mulInt : Int, Int -> Int
    ext pub _divInt : Int, Int -> Int
    ext pub _equInt : Int, Int -> Bool
    ext pub _neqInt : Int, Int -> Bool
    ext pub _leqInt : Int, Int -> Bool
    ext pub _greInt : Int, Int -> Bool

    ext pub _addFlt : Flt, Flt -> Flt
    ext pub _subFlt : Flt, Flt -> Flt
    ext pub _mulFlt : Flt, Flt -> Flt
    ext pub _divFlt : Flt, Flt -> Flt
    ext pub _equFlt : Flt, Flt -> Bool
    ext pub _neqFlt : Flt, Flt -> Bool
    ext pub _leqFlt : Flt, Flt -> Bool
    ext pub _greFlt : Flt, Flt -> Bool
    ext pub _floorFlt : Flt -> Int
    ext pub _convItoF : Int -> Flt

    ext pub _convItoC : Int -> Chr
    ext pub _convCtoI : Chr -> Int
    ext pub _putChr : Chr, RealWorld_ -> RealWorld_
    ext pub _getChr : RealWorld_ -> (Chr, RealWorld_)
    ext pub _exit : RealWorld_ -> RealWorld_
}

def pub (|>) : forall a b c. (a -> b) -> (b -> c) -> (a -> c)
    = \f,g,x->g(f x)
def pub (<|) : forall a b c. (b -> c) -> (a -> b) -> (a -> c)
    = \f,g,x->f(g x)
def pub (|->) : forall a b. a -> (a -> b) -> b
    = \x,f->f x
def pub ($) : forall a b. (a -> b) -> a -> b
    = \a,b->a b
def pub flip : forall a b c. (a -> b -> c) -> b -> a -> c
    = \f,x,y->f y x
def pub curry : forall a b c. ((a, b) -> c) -> a -> b -> c
    = \f,x,y->f(x,y)
def pub uncurry : forall a b c. (a -> b -> c) -> (a, b) -> c
    = \f,(x,y)->f x y
def pub id : forall a. a -> a
    = \x->x
def pub const : forall a b. a -> b -> a
    = \x,_->x
def pub fst : forall a b. (a, b) -> a
    = \(a,_)->a
def pub snd : forall a b. (a, b) -> b
    = \(_,b)->b

mod BoolCore {
    def pub (&&) : Bool -> Bool -> Bool =
        \ True, True -> True
        | _, _ -> False

    def pub (||) : Bool -> Bool -> Bool =
        \ False, False -> False
        | _, _ -> True

    def pub not : Bool -> Bool =
        \ True -> False
        | False -> True
} use pub BoolCore

mod NumCore {
    # Relazioni e istanze dei numerici builtin

    rel pub Num a =
        (+) : a -> a -> a,
        (-) : a -> a -> a,
        (*) : a -> a -> a,
        (/) : a -> a -> a,
        fromInt : Int -> a
rel pub Eq a =
        (==) : a -> a -> Bool,
        (!=) : a -> a -> Bool

    inst forall a b. {Eq a, Eq b} => Eq (a, b) {
        def (==) = \(a, b), (a', b') -> (a == a') && (b == b')
        def (!=) = \a, b -> not $ a == b
    }


    rel pub {Eq a} => Ord a =
        (<) : a -> a -> Bool,
        (>) : a -> a -> Bool,
        (>=) : a -> a -> Bool,
        (<=) : a -> a -> Bool

    rel pub Enum a =
        fromEnum : a -> Int,
        toEnum : Int -> a

    use Builtins

    # TODO: usa un intrinseco
    def pub rem : Int -> Int -> Int
        = \a, b -> a - b * a / b

    # TODO: forse incorpora in Num
    def pub abs : forall a. {Num a, Ord a} => a -> a
        = \a -> put a < fromInt 0
        | True -> fromInt 0 - a
        | False -> a

    def expAux =
        \ curr, a, 0 -> curr
        | curr, a, n -> expAux (a * curr) a (n - 1)
    and pub (^) : forall a. {Num a} => a -> Int -> a
        = expAux (fromInt 1)

    inst Enum Int {
        def toEnum = id
        def fromEnum = id
    }

    inst Enum Chr {
        def toEnum = _convItoC
        def fromEnum = _convCtoI
    }

    inst Num Int {
        def (+) = _addInt
        def (-) = _subInt
        def (*) = _mulInt
        def (/) = _divInt
        def fromInt = id
    }

    inst Eq Int {
        def (==) = _equInt
        def (!=) = _neqInt
    }

    inst Num Flt {
        def (+) = _addFlt
        def (-) = _subFlt
        def (*) = _mulFlt
        def (/) = _divFlt
        def fromInt = _convItoF
    }
    def pub floor = _floorFlt

    inst Eq Flt {
        def (==) = _equFlt
        def (!=) = _neqFlt
    }

    inst Eq Chr {
        def (==) = \a, b -> fromEnum a == fromEnum b
        def (!=) = \a, b -> fromEnum a != fromEnum b
    }

    inst Ord Int {
        def (<) = \a,b->_greInt b a
        def (>) = _greInt
        def (<=)= _leqInt
        def (>=)= \a,b->_leqInt b a
    }

    inst Ord Flt {
        def (<) = \a,b->_greFlt b a
        def (>) = _greFlt
        def (<=)= _leqFlt
        def (>=)= \a,b->_leqFlt b a
    }
} use pub NumCore

mod MonadCore {
    # Definizione di Monade e delle strutture da cui dipende

    rel pub Functor f =
        # LAWS
        # 1. fmap id = id
        # 2. fmap (f <| g) = fmap f <| fmap g
        fmap : forall a b. (a -> b) -> f a -> f b

    rel pub {Functor m} => Monad m =
        # LAWS
        # 1. bind (return a) k = k a
        # 2. bind m return = m
        # 3. bind m (\x -> bind (k x) h) = bind (bind m k) h
        # 4. fmap f m = bind m (\x -> return f x)
        return : forall a. a -> m a,
        bind : forall a b. m a -> (a -> m b) -> m b

    def pub (>>=) : forall m a b. {Monad m} => m a -> (a -> m b) -> m b
        = bind
    def pub (>>) : forall m a b. {Monad m} => m a -> m b -> m b
        = \m, m' -> m >>= \_ -> m'

    inst forall m. {Monad m} => Functor m {
        def fmap = \f, m -> bind m (\x->return (f x))
    }
} use pub MonadCore

mod ListCore {
    # Definizione di lista e alcuni primitivi molto utili

    data pub List a
        = Nil
        | Cons a (List a)

    def pub (::) : forall a. a -> List a -> List a
        = Cons

    def reverseAux = \acc, l ->
        put l
        | Nil -> acc
        | Cons x xs -> reverseAux (x :: acc) xs
    def pub reverse : forall a. List a -> List a
    = reverseAux Nil

    def mapAux = \procd, f, l -> put l
        | Nil -> reverse procd
        | Cons x xs -> mapAux (f x :: procd) f xs
    def pub map : forall a b. (a -> b) -> List a -> List b
        = mapAux Nil

    inst Functor List {def fmap = map}

    def pub (++) : forall a. List a -> List a -> List a
        = \l, l' -> put l
        | Nil -> l'
        | Cons x xs -> x :: (xs ++ l')

    inst Monad List {
        def return = \x -> x :: Nil
        def bind = \l, f->
            put l
            | Nil -> Nil
            | Cons x xs -> f x ++ bind xs f
    }

    inst forall a. {Eq a} => Eq (List a) {
        def (==) =
            \ Nil, Nil -> True
            | Cons x xs, Cons y ys -> (put x == y
                | True -> xs == ys
                | _ -> False)
            | _, _ -> False
        def (!=) = \a, b -> not (a == b)
    }

} use pub ListCore

mod ShowCore {
    typesyn pub String = List Chr
    # Definizione di Show e delle sue istanze sui tipi builtin

    rel pub Show a = show : a -> String

    def pub strNil : String = Nil
    inst Show () {
        def show = \() -> '('::')':: Nil
    }

    inst Show Bool {
        def show =
            \ True -> 'T'::'r'::'u'::'e'::Nil
            | False -> 'F'::'a'::'l'::'s'::'e'::Nil
    }

    def showDigit : Int -> Chr = \i -> toEnum (48 + i)

    def showNonNegAux = \s, i -> put (i < 10)
        | True -> showDigit i :: s
        | _ ->
            showNonNegAux (showDigit (rem i 10) :: s) (i / 10)
    def showNonNeg = showNonNegAux Nil

    def showInt = \i ->
        put i < 0
        | True -> '-' :: showNonNeg (0-i)
        | _ -> showNonNeg i

    inst Show Int { def show = showInt }

    def showFracAux =
        \ 0, curr, i -> curr
        | n, curr, i ->
            showFracAux (n - 1) (showDigit (rem i 10) :: curr) (i / 10)
    # TODO: 1000 e 3 significa 3 cifre dopo il punto, magari usane di più. Forse bisogna fare un arrotondamento invece di un floor
    # TODO: quest'algoritmo non è flessibile, va riscritto
    def showFrac = \f -> showFracAux 3 Nil (floor (1000.0*f))

    def showNonNegFlt = \f ->
        let flr = floor f ->
        show flr ++ '.' :: showFrac (f - fromInt flr)

    def showFlt = \f ->
        put f < 0.0
        | True -> '-' :: showNonNegFlt (0.0-f)
        | _ -> showNonNegFlt f

    inst Show Flt { def show = showFlt }

    def escapeChr =
        \ '\n' -> '\\'::'n'::Nil
        | '\\' -> '\\'::'\\'::Nil
        | '\'' -> '\\'::'\''::Nil
        | '"' -> '\\'::'"'::Nil
        | c -> c::Nil #Solo se 32 <= fromEnum c <= 126

    inst Show Chr {
        def show = \c -> Cons '\'' (escapeChr c) ++ ('\''::Nil)
    }

    inst Show String {
        def show = \l -> Cons '"' (l >>= escapeChr) ++ ('"'::Nil)
    }

    def showListAux =
        \ Nil -> ']' :: Nil
        | Cons x Nil -> show x ++ (']' :: Nil)
        | Cons x xs -> show x ++ Cons ',' (Cons ' ' Nil) ++ showListAux xs

    def showList = \l -> '[' :: showListAux l

    inst forall a. {Show a} => Show (List a) {
        def show = showList
    }

    inst forall a b. {Show a, Show b} => Show (a, b) {
        def show = \(a, b) -> '(' :: show a ++ (','::' '::Nil) ++ show b ++ (')'::Nil)
    }
} use pub ShowCore

mod IOCore {
    # Definizione del monade IO e delle operazioni primitive

    data pub IO a = IO (RealWorld_ -> (a, RealWorld_))

    inst Functor IO {
        def fmap = \f, IO tf -> IO (\rw->
                let (a, rw') = tf rw ->
                    (f a, rw')
            )
    }

    inst Monad IO {
        def return = \a -> IO(\rw -> (a, rw))
        def bind = \IO tf, f -> IO (\rw->
                let (a, rw') = tf rw ->
                let IO tf' = f a ->
                tf' rw'
            )
    }

    mod pub UnsafeIO {
        use Builtins

        def pub putChr = _putChr
        def pub getChr = _getChr
        def pub exit = _exit

        def pub putStr : String -> RealWorld_ -> RealWorld_
            = \s, rw -> put s
            | Nil -> rw
            | Cons c cs ->
                let rw' = putChr c rw ->
                putStr cs rw'
        def pub putStrLn = \s, rw ->
            let rw' = putStr s rw ->
            putChr '\n' rw'
        def pub getLn = \rw ->
            put getChr rw
            | ('\n', rw') -> (Nil, rw')
            | (c, rw') ->
                let (s, rw'') = getLn rw' ->
                (c :: s, rw'')

        def pub runTopIO = \IO tf -> let ((), rw) = tf RealWorld_ -> rw
    }

    def pub putChr : Chr -> IO ()
        = \c -> IO(\s->((), UnsafeIO.putChr c s))
    def pub getChr : IO Chr
        = IO UnsafeIO.getChr
    def pub putStr : String -> IO ()
        = \l -> IO(\s->((), UnsafeIO.putStr l s))
    def pub putStrLn : String -> IO ()
        = \l -> IO(\s->((), UnsafeIO.putStrLn l s))
    def pub getLn : IO String
        = IO UnsafeIO.getLn

    def pub print : forall a. {Show a} => a -> IO ()
        = show |> putStrLn

    def errorAux : forall a. String -> RealWorld_ -> a
        = \s, rw -> errorAux s (UnsafeIO.exit (UnsafeIO.putStrLn s rw))
    def pub error : forall a. String -> a
        = \s -> errorAux ('e'::'r'::'r'::'o'::'r'::':'::' '::s) RealWorld_
} use pub IOCore


# TODO: inserisci in un modulo a sé

rel pub ProgramTop a = runProgramTop : a -> IO ()

inst ProgramTop (IO ()) { def runProgramTop = id }

inst forall a. {Show a} => ProgramTop a { def runProgramTop = print }

inst forall a. {ProgramTop a} => ProgramTop (IO a) {
    def runProgramTop = (>>= runProgramTop)
}
