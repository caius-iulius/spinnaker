use Core

mod List "stdlib/list"
def mapMAux = \procd, f, l -> put l
    | [] -> return (List.reverse procd)
    | [x | xs] ->
        a <- f x;
        mapMAux (a :: procd) f xs
def pub mapM : forall m a b. {Monad m} => (a -> m b) -> List a -> m (List b)
    = mapMAux []


rel pub {Monad m} => MonadPlus m =
    # LAWS
    # 1) MONOID
    # 1.1) mplus mzero a = a
    # 1.2) mplus a mzero = a
    # 1.3) mplus (mplus a b) c = mplus a (mplus b c)
    # 2) mzero >>= f = mzero
    # 3) m >> mzero = mzero
    mzero : forall a. m a,
    mplus : forall a. m a -> m a -> m a

def pub guard : forall m. {MonadPlus m} => Bool -> m ()
    = \b -> put b
    | True -> return ()
    | False -> mzero

inst MonadPlus List {
    def mzero = Nil
    def mplus = (++)
}

rel pub {Monad m} => MonadFail m =
    # Se {MonadPlus m} si puÃ² considerare: mzero = fail "mzero"
    fail : forall a. List Chr -> m a

inst MonadFail IO {
    def fail = error
}
