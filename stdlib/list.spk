use Core

mod Maybe "maybe.spk"

def pub head : forall a. [a] -> a
    = \[x | xs] -> x
def pub tail : forall a. [a] -> [a]
    = \[x | xs] -> xs
def pub last : forall a. [a] -> a =
    \ [x] -> x
    | [x | xs] -> last xs
def pub init : forall a. [a] -> [a] =
    \ [x] -> []
    | [x | xs] -> x :: (init xs)

# TODO: uncons

def pub null : forall a. [a] -> Bool =
    \ [] -> True
    | _ -> False

def lengthAux = \n, l -> put l
    | [] -> n
    | [_ | xs] -> lengthAux (n + 1) xs
and pub length : forall a. [a] -> Int
    = lengthAux 0

def pub foldl : forall a s. (s -> a -> s) -> s -> [a] -> s
    = \f, s, l -> put l
    | [] -> s
    | [x | xs] -> foldl f (f s x) xs

def pub foldr : forall s a. (a -> s -> s) -> s -> [a] -> s
    = \f, s, l -> put l
    | [] -> s
    | [x | xs] -> f x (foldr f s xs)

def pub foldl1 : forall a. (a -> a -> a) -> [a] -> a
    = \f, [x | xs] -> foldl f x xs

# TODO: foldr1, scanl, scanr, scanl1, scanr1

# TODO: versione tail-call?
def pub unfoldr : forall a b. (a -> Maybe.Maybe (b, a)) -> a -> [b]
    = \f, a -> put f a
    | Maybe.None -> []
    | Maybe.Some (b, a') -> b :: unfoldr f a'

def replicateAux =
    \ curr, 0, _ -> curr
    | curr, n, a -> replicateAux (a :: curr) (n - 1) a
and pub replicate : forall a. Int -> a -> [a]
    = replicateAux []

# TODO: Tailcall
def pub map2 : forall a b c. (a -> b -> c) -> [a] -> [b] -> [c]
    = \f, l, l' -> put l, l'
    | [], _ -> []
    | _, [] -> []
    | [x | xs], [x' | xs'] -> f x x' :: map2 f xs xs'

# TODO: Tailcall
# zip = map2 (,)
def pub zip : forall a b. [a] -> [b] -> [(a, b)] =
    \ [], _ -> []
    | _, [] -> []
    | [x | xs], [x' | xs'] -> (x, x') :: zip xs xs'

def pub any : forall a. (a -> Bool) -> [a] -> Bool
    = \bf, l -> put l
    | [] -> False
    | [x | xs] -> put bf x
        | True -> True
        | _ -> any bf xs

def pub all : forall a. (a -> Bool) -> [a] -> Bool
    = \bf, l -> put l
    | [] -> True
    | [x | xs] -> put bf x
        | False -> False
        | _ -> all bf xs

# TODO: and, or, sum, product, maximum, minimum

def pub elem : forall a. {Eq a} => a -> [a] -> Bool
    = \x -> any (x ==)

def pub nth : forall a. Int -> [a] -> a
    = \n, l -> put n
    | 0 -> head l
    | _ -> nth (n - 1) (tail l)

# TODO: versione tail-call
def pub updateAt : forall a. Int -> (a -> a) -> [a] -> [a]
    = \n, f, l -> put n, l
    | 0, [x | xs] -> f x :: xs
    | _, [x | xs] -> x :: updateAt (n - 1) f xs

def filterAux
    = \c, f, l -> put l
    | [] -> reverse c
    | [x | xs] ->
        let newc = if f x then x :: c else c ->
        filterAux newc f xs
and pub filter : forall a. (a -> Bool) -> [a] -> [a]
    = filterAux []

def pub find : forall a. (a -> Bool) -> [a] -> Maybe.Maybe a =
    \ f, [] -> Maybe.None
    | f, [x | xs] -> if f x
        then Maybe.Some x
        else find f xs

def findIndexAux =
    \ _, _, [] -> Maybe.None
    | n, f, [x | xs] -> if f x
        then Maybe.Some n
        else findIndexAux (n+1) f xs
and pub findIndex : forall a. (a -> Bool) -> [a] -> Maybe.Maybe Int
    = findIndexAux 0

def pub elemIndex : forall a. {Eq a} => a -> [a] -> Maybe.Maybe Int
    = \a -> findIndex (a ==)

def pub lookup : forall a b. {Eq a} => a -> [(a, b)] -> Maybe.Maybe b
    = \a -> fmap snd <| find (fst |> (a ==))

# TODO: partition, elemIndices, findIndex serio, findIndices

# TODO: forse conviene utilizzare una funzione passata come argomento come trasformazione di c e l, oppure reimplementare take e drop autonomamente
def splitAtAux = \c, i, l -> put i, l
    | 0, _ -> (reverse c, l)
    | _, [x | xs] -> splitAtAux (x::c) (i - 1) xs
and pub splitAt : forall a. Int -> [a] -> ([a], [a])
    = splitAtAux []

def pub take : forall a. Int -> [a] -> [a]
    = \i, l -> fst (splitAtAux [] i l)
def pub drop : forall a. Int -> [a] -> [a]
    = \i, l -> snd (splitAtAux [] i l)

def splitWhileAux =
    \ c, _, [] -> (reverse c, [])
    | c, f, [x | xs] ->
        if f x then splitWhileAux (x :: c) f xs
        else (reverse c, x :: xs)
#TODO: equivalente a 'span' di haskell. considera di rinominare
and pub splitWhile : forall a. (a -> Bool) -> [a] -> ([a], [a])
    = splitWhileAux []

def pub takeWhile : forall a. (a -> Bool) -> [a] -> [a]
    = \f, l -> fst (splitWhileAux [] f l)
def pub dropWhile : forall a. (a -> Bool) -> [a] -> [a]
    = \f, l -> snd (splitWhileAux [] f l)

def pub (\\) : forall a. {Eq a} => [a] -> [a] -> [a]
    = \l, m -> filter (\x -> all (x !=) m) l

# TODO?: inits, tails

# TODO: Tailcall
def pub nub : forall a. {Eq a} => [a] -> [a] =
    \ [] -> []
    | [x | xs] -> x :: nub (filter (x !=) xs)

# TODO: nubBy, union, unionBy, intersect, intersectBy, insert, insertBy, sort, sortBy, sortOn, delete, deleteBy

def pub concat : forall a. [[a]] -> [a]
    = (>>= id)

def transposeAux =
    \ [l] -> map (::[]) l
    | [l | ls] -> map2 (::) l (transposeAux ls)
and pub transpose : forall a. [[a]] -> [[a]] =
    \ [] -> []
    | ls -> transposeAux ls
# TODO: intercalate, subsequences, permutations, enumerate
