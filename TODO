implementa il parsing dei pattern (LABEL@PATTERN), tipo haskell. La rappresentazione interna dei pattern è già stata predisposta per questo

phantom types per determinare se un programma è stato tipizzato? (oppure a che livello di tipizzazione è un'ipotetica rappresentazione uniforme)

invece di usare def...and... per le definizioni di valore coricorsive, si può considerare la costruzione di un digrafo dove le frecce sono le possibili chiamate da una funzione del toplevel a un'altra, dopodiché si può usare un algoritmo (per esempio kosaraju) per trovare i cicli e tipizzarli monomorficamente
alternativamente si può introdurre un vincolo: ogni valore utilizzato prima della sua dichiarazione deve avere un tipo specificato dall'hint. Questo però apre la strada alla ricorsione polimorfica, che andrebbe impedita da qualche altro controllo. Inoltre anche semplici programmi come il fattoriale dovrebbero essere annotati.

prendi una decisione riguardo all'ambiguità sintattica del pattern matching

STUDIA K-NORMAL FORMS E A-NORMAL FORMS, SE NON ORA USA UNA DI QUESTE NEL PROSSIMO COMPILATORE

DIMOSTRA IL TYPER, SPECIALMENTE LE REGOLE DEI PATTERN

SCEGLI UNA SINTASSI MIGLIORE PER "inst" (e forse per i constraint)
Attualmente la sintassi con '{' e '}' va bene, ma sarà ambigua appena implementerò i row types

Il lexer fa casini coi numeri di colonna(forse anche linea) dopo i caratteri speciali. Non è detto che la gestione dei caratteri al momento sia corretta

supporto multifile

crea una stdlib

incorpora file core

considera l'aggiunta di idadd e idmul alla definizione di Num (che potrebbe essere rinominato Field)

1. [OK] cosotruttori sempre completamente applicati (Cons --> \a0, a1 -> Cons a0 a1)
2. typing typerel
    - [OK] risoluzione dei kind nei rel
    - [OK] aggiunta dei rel e delle definizioni dei loro membri nel contesto
    - [OK] entailment ecc. come in THIH
    - [OK] tipizzazione delle espressioni con Qual DataType
    - [OK] gestione dell'hinting e dei predicati nei gruppi di valdef
    - [OK] tipizzazione istanze
    - [OK] riscrivi l'interprete per propagare i tipi e scegliere da vtable
    - [TEST] implementa un sistema di superrel (come le superclass di Haskell)
        - il controllo forse è effettuato troppo tardi, viene usato entailInsts che non è detto che sia corretto
    - aggiungi controlli per limitare overlap
        - rilevamento istanze identiche
        - le istanze devono trattare una relazione o un tipo definiti nel proprio modulo
3. aggiungi controlli per halting del compilatore
    - controlla decidibilità delle istanze (forse non si può fare)
    - controlla valori reciprocamente definiti (e.g. def a = b and b = a) (sia in bindgroup che tra istanze)
4. monomorfizzazione
    - [OK] valori, relazioni
    - datatype (come fa MLTon, selettiva sulle varianti usate)
5. [TEST] notazione do, sto usando una guardia 'do' che non vorrei che ci fosse nella sintassi finale
6. defunzionalizzazione e semplificazione a un branch per putexpr
7. ottimizzazioni (guarda il video di SPJ "Haskell in 9 constructors")
    - [TEST] inlining globale
    - inlining locale
    - putofput
    - application
8. compilazione a C
