use Std
use List

mod pub Sort {
    def split = \l -> splitAt (length l / 2) l

    def merge = \cmp, lists ->
        put lists
        | (l, []) -> l
        | ([], l) -> l
        | ([xa | xsa], [xb | xsb]) -> (
            put cmp xa xb
            | True -> xa :: merge cmp (xsa, (xb::xsb))
            | False -> xb :: merge cmp ((xa::xsa), xsb)
        )

    def pub sortBy = \cmp, list ->
        put list
        | [] -> []
        | [x] -> list
        | _ -> let (left, right) = split list ->
            merge cmp (sortBy cmp left, sortBy cmp right)

    def pub sort = sortBy (<=)
}

def ordleft = \(a,_),(b,_)->a <= b
def ordright = \(_,a),(_,b)->a <= b

def main =
    Sort.sortBy ordleft $
    Sort.sortBy ordright $
        x <- -5..0;
        y <- reverse $ 0..10;
        return (x, y)
