# TODO:Questo file andrÃ  copiato in una stringa nel compilatore

def pub (|>) = \f,g,x->g(f x)
def pub (<|) = \f,g,x->f(g x)
def pub (|->) = \x,f->f x
def pub ($) = \a,b->a b
def pub flip = \f,x,y->f y x
def pub curry = \f,x,y->f(x,y)
def pub uncurry = \f,(x,y)->f x y

rel pub Num a =
    (+) : a -> a -> a,
    (-) : a -> a -> a,
    (*) : a -> a -> a,
    (/) : a -> a -> a

rel pub Eq a =
    (=) : a -> a -> Bool,
    (!=) : a -> a -> Bool

rel pub Ord a =
    (<) : a -> a -> Bool,
    (>) : a -> a -> Bool,
    (>=) : a -> a -> Bool,
    (<=) : a -> a -> Bool


inst Num Int {
    def (+) = \a,b->_addInt(a,b)
    def (-) = \a,b->_subInt(a,b)
    def (*) = \a,b->_mulInt(a,b)
    def (/) = \a,b->_divInt(a,b)
}

inst Eq Int {
    def (=) = \a,b->_equInt(a,b)
    def (!=)= \a,b->_neqInt(a,b)
}

inst Ord Int {
    def (<) = \a,b->_greInt(b,a)
    def (>) = \a,b->_greInt(a,b)
    def (<=)= \a,b->_leqInt(a,b)
    def (>=)= \a,b->_leqInt(b,a)
}

mod pub List {
    data pub List a
        = Nil
        | Cons a (List a)

    def reverse_internal = \acc, l ->
        put l
        | Nil -> acc
        | Cons x xs -> reverse_internal (Cons x acc) xs
    def pub reverse = reverse_internal Nil

    def pub head = \Cons x xs -> x
    def pub tail = \Cons x xs -> xs
    def pub last = \l ->
        put l
        | Cons x Nil -> x
        | Cons x xs -> last xs

    def pub map = \f, l ->
        put l
        | Nil -> Nil
        | Cons x xs -> Cons (f x) (map f xs)

    def pub foldl = \f, s, l ->
        put l
        | Nil -> s
        | Cons x xs -> foldl f (f s x) xs

    def pub foldr = \f, s, l ->
        put l
        | Nil -> s
        | Cons x xs -> f x (foldr f s xs)

    def pub length = \l ->
        put l
        | Nil -> 0
        | Cons _ xs -> 1 + length xs

    def pub zip = \l, l' ->
        put (l, l')
        | (Nil, _) -> Nil
        | (_, Nil) -> Nil
        | (Cons x xs, Cons x' xs') -> Cons (x, x') (zip xs xs')

    def pub zipWith = \f, l, l' ->
        put (l, l')
        | (Nil, _) -> Nil
        | (_, Nil) -> Nil
        | (Cons x xs, Cons x' xs') -> Cons (f x x') (zipWith f xs xs')

    def pub (++) = \l, l' ->
        put l
        | Nil -> l'
        | Cons x xs -> Cons x (xs ++ l')

    def pub (..) = \from, to ->
        put from >= to
        | True -> Nil
        | _ -> Cons from ((from+1)..to)
}
use pub List

mod pub Show {
    rel pub Show a = show : a -> List Chr

    inst Show () {
        def show = \() -> Cons '(' (Cons ')' Nil)
    }

    inst Show Bool {
        def show = \b -> put b
            | True -> Cons 'T' (Cons 'r' (Cons 'u' (Cons 'e' Nil)))
            | False -> Cons 'F' (Cons 'a' (Cons 'l' (Cons 's' (Cons 'e' Nil))))
    }

    def showDigit = \i -> _convItoC (48 + i)

    def showNonNeg = \i ->
        put i < 10
        | True -> Cons (showDigit i) Nil
        | _ ->
            let div10 = i/10 ->
            let prev = showNonNeg div10 ->
            prev ++ Cons (showDigit $ i - div10*10) Nil

    def showInt = \i ->
        put i < 0
        | True -> Cons '-' (showNonNeg (0-i))
        | _ -> showNonNeg i

    inst Show Int { def show = showInt }

    def escapeChar = \c -> put c
        | '\n' -> Cons '\\' (Cons 'n' Nil)
        | '\\' -> Cons '\\' (Cons '\\' Nil)
        | '\'' -> Cons '\\' (Cons '\'' Nil)
        | '"' -> Cons '\\' (Cons '"' Nil)
        | _ -> Cons c Nil

    inst Show Chr {
        def show = \c -> Cons '\'' (escapeChar c) ++ (Cons '\'' Nil)
    }

    inst Show (List Chr) {
        def show = \l -> Cons '"' (foldl (\s, c -> s ++ escapeChar c) Nil l) ++ Cons '"' Nil
    }

    def showListInternal = \l ->
        put l
        | Nil -> Cons ']' Nil
        | Cons x Nil -> show x ++ Cons ']' Nil
        | Cons x xs -> show x ++ Cons ',' (Cons ' ' Nil) ++ showListInternal xs

    def showList = \l -> Cons '[' (showListInternal l)

    inst forall a. {Show a} => Show (List a) {
        def show = showList
    }
}
use pub Show

mod pub IO {
    def pub putChr = _putChr
    def pub getChr = _getChr
    def pub putStr = \s ->
        put s
        | Nil -> ()
        | Cons c cs ->
            let _ = (putChr c, putStr cs) -> ()
    def pub putStrLn = \s ->
        let _ = (putStr s, putChr '\n') -> ()
}
use pub IO
# NOTA: Ovviamente serve tanta roba, come le funzioni liftM2, cose su liste, monadi, moduli...
